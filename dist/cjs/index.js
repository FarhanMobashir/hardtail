"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var t=e(require("react"));const r=(e,r)=>{const[o,a]=t.default.useReducer(e,r);return[o,t.default.useCallback((e=>{"development"===process.env.NODE_ENV&&console.log("action type",e.type,"payload",e.payload),"function"==typeof e?e(a):a(e)}),[a])]},o=(e,t,r)=>{e({type:r.name,payload:t})},a=e=>({queryArray:r,baseQuery:a})=>{const u={};return r.forEach((r=>{const n=(e=>`use${e.name[0].toUpperCase()+e.name.slice(1)}`)(r),l=({urlParams:u="",fetchOptions:n})=>{const[l,s]=t.default.useState(!0),[d,c]=t.default.useState(!1),[i,p]=t.default.useState(null);return t.default.useEffect((()=>(s(!0),a(`${r.query}/${u}`,{...n}).then((e=>(r.log&&console.log("logging response",e),e.json()))).then((t=>{p(t),s(!1),o(e,t,r)})).catch((e=>{r.log&&console.error("logging error",e),s(!1),c(e)})),()=>{})),[e,u]),{loading:l,data:i,error:d}};"query"===r.type?u[n]=l:"mutation"===r.type&&(u[n]=function(){const[u,n]=t.default.useState(null),[l,s]=t.default.useState(!1),[d,c]=t.default.useState(null);let i=t.default.useCallback((({body:t={},urlParams:u=""})=>{n(!0),a(`${r.query}/${u}`,{method:r.method,body:JSON.stringify(t)}).then((e=>(r.log&&console.log("logging response",e),e.json()))).then((t=>{c(t),n(!1),o(e,{data:t},r)})).catch((e=>{r.log&&console.error("logging error",e),n(!1),s(e)}))}),[]);return[i,{loading:u,error:l,data:d}]})})),u},u=t.default.createContext();exports.ApiProvider=({children:e,apiArray:o=[],baseQuery:n,apiActionTypes:l={}})=>{const s=(e=>{let t={};for(let r in e)t[r]=null;return t})(l),[d,c]=r(((e=s,t)=>{for(let r in s)t.type===r&&(e[t.type]=t.payload);return e}),s),i=a(c)({queryArray:o,baseQuery:n});return t.default.createElement(u.Provider,{value:{state:d,dispatch:c,...i}},e)},exports.buildHooks=a,exports.useApi=()=>{const e=t.default.useContext(u);if(void 0===e)throw new Error("useApi must be used within a ApiProvider");return e},exports.useThunkReducer=r;
//# sourceMappingURL=index.js.map
